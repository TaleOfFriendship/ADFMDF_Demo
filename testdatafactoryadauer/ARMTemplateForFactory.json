{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "testdatafactoryadauer"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DimEmployeePipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LoadDimEmployee",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DimEmployeeLoader21",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Employees1": {},
									"DimEmployees": {},
									"sinkNew": {},
									"sinkUpdates": {},
									"sinkInactive": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"folder": {
					"name": "Demos"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DimEmployeeLoader21')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD2 Demo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "AddToHistory",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "AddAddress",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SCD2 data flow v3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DimCustomerSource": {},
									"CustomerSource": {},
									"GetMaxValForSK": {},
									"sinkChanges": {},
									"sinkInactive": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					},
					{
						"name": "AddAddress",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CopyCustomer",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CopyAddress",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "AddAddress",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CustomerSource": {},
									"CustomerAddressSource": {},
									"AddressSource": {},
									"CustomerAddressSource2": {},
									"CustomerAndAddress": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					},
					{
						"name": "CopyCustomer",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE dbo.CustomerCopy"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CustomerID",
											"type": "Int32"
										},
										"sink": {
											"name": "CustomerID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NameStyle",
											"type": "Boolean"
										},
										"sink": {
											"name": "NameStyle",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "Title",
											"type": "String"
										},
										"sink": {
											"name": "Title",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "FirstName",
											"type": "String"
										},
										"sink": {
											"name": "FirstName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "MiddleName",
											"type": "String"
										},
										"sink": {
											"name": "MiddleName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "LastName",
											"type": "String"
										},
										"sink": {
											"name": "LastName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Suffix",
											"type": "String"
										},
										"sink": {
											"name": "Suffix",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CompanyName",
											"type": "String"
										},
										"sink": {
											"name": "CompanyName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SalesPerson",
											"type": "String"
										},
										"sink": {
											"name": "SalesPerson",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "EmailAddress",
											"type": "String"
										},
										"sink": {
											"name": "EmailAddress",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Phone",
											"type": "String"
										},
										"sink": {
											"name": "Phone",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "PasswordHash",
											"type": "String"
										},
										"sink": {
											"name": "PasswordHash",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "PasswordSalt",
											"type": "String"
										},
										"sink": {
											"name": "PasswordSalt",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "rowguid",
											"type": "Guid"
										},
										"sink": {
											"name": "rowguid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "ModifiedDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "ModifiedDate",
											"type": "DateTime"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "CustomerSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CustomerCopy",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CopyAddress",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE dbo.CustomerAddressCopy"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CustomerAddress",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CustomerAddressCopy",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "Demos"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SCD2 data flow v3')]",
				"[concat(variables('factoryId'), '/dataflows/AddAddress')]",
				"[concat(variables('factoryId'), '/datasets/CustomerSource')]",
				"[concat(variables('factoryId'), '/datasets/CustomerCopy')]",
				"[concat(variables('factoryId'), '/datasets/CustomerAddress')]",
				"[concat(variables('factoryId'), '/datasets/CustomerAddressCopy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FirstInsertDimCustomer",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FirstInsertDimCustomer",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CustomerSource": {},
									"CustomerAddressSource": {},
									"AddressSource": {},
									"CustomerAddressSource2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/FirstInsertDimCustomer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/temp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SCD Data Flow v5",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SCD Data Flow v5",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DimCustomerSource": {},
									"CustomerSource": {},
									"GetMaxValSK": {},
									"sinkChanges": {},
									"sinkInactive": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SCD Data Flow v5')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Address')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "AddressID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "AddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "City",
						"type": "nvarchar"
					},
					{
						"name": "StateProvince",
						"type": "nvarchar"
					},
					{
						"name": "CountryRegion",
						"type": "nvarchar"
					},
					{
						"name": "PostalCode",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "Address"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "AddressCopy"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Customer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NameStyle",
						"type": "bit"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "MiddleName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "Suffix",
						"type": "nvarchar"
					},
					{
						"name": "CompanyName",
						"type": "nvarchar"
					},
					{
						"name": "SalesPerson",
						"type": "nvarchar"
					},
					{
						"name": "EmailAddress",
						"type": "nvarchar"
					},
					{
						"name": "Phone",
						"type": "nvarchar"
					},
					{
						"name": "PasswordHash",
						"type": "varchar"
					},
					{
						"name": "PasswordSalt",
						"type": "varchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[CustomerCopy]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerAddress')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AddressID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AddressType",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"tableName": "[[SalesLT].[CustomerAddress]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerAddress2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AddressID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AddressType",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[CustomerAddressCopy]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerAddressCopy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AddressID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AddressType",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CustomerAddressCopy"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerAndAddress')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "CompanyName",
						"type": "nvarchar"
					},
					{
						"name": "Address",
						"type": "nvarchar"
					},
					{
						"name": "PostalCode",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CustomerAndAddress"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerCopy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NameStyle",
						"type": "bit"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "MiddleName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "Suffix",
						"type": "nvarchar"
					},
					{
						"name": "CompanyName",
						"type": "nvarchar"
					},
					{
						"name": "SalesPerson",
						"type": "nvarchar"
					},
					{
						"name": "EmailAddress",
						"type": "nvarchar"
					},
					{
						"name": "Phone",
						"type": "nvarchar"
					},
					{
						"name": "PasswordHash",
						"type": "varchar"
					},
					{
						"name": "PasswordSalt",
						"type": "varchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CustomerCopy"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NameStyle",
						"type": "bit"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "MiddleName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "Suffix",
						"type": "nvarchar"
					},
					{
						"name": "CompanyName",
						"type": "nvarchar"
					},
					{
						"name": "SalesPerson",
						"type": "nvarchar"
					},
					{
						"name": "EmailAddress",
						"type": "nvarchar"
					},
					{
						"name": "Phone",
						"type": "nvarchar"
					},
					{
						"name": "PasswordHash",
						"type": "varchar"
					},
					{
						"name": "PasswordSalt",
						"type": "varchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"tableName": "[[SalesLT].[Customer]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimCustomer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SurrogateKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "CompanyName",
						"type": "nvarchar"
					},
					{
						"name": "Address",
						"type": "nvarchar"
					},
					{
						"name": "PostalCode",
						"type": "nvarchar"
					},
					{
						"name": "ValidFrom",
						"type": "date"
					},
					{
						"name": "ValidTo",
						"type": "date"
					},
					{
						"name": "Valid",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"tableName": "dbo.DimCustomer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimCustomerOriginal')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "CompanyName",
						"type": "nvarchar"
					},
					{
						"name": "AddressID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ValidFrom",
						"type": "date"
					},
					{
						"name": "ValidTo",
						"type": "date"
					},
					{
						"name": "Valid",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[DimCustomer]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimCustomerSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "CompanyName",
						"type": "nvarchar"
					},
					{
						"name": "AddressID",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[DimCustomer]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimEmp1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "EmpID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "surrogatekey",
						"type": "nvarchar"
					},
					{
						"name": "Region",
						"type": "nvarchar"
					},
					{
						"name": "Status",
						"type": "nvarchar"
					},
					{
						"name": "EmpFunction",
						"type": "nvarchar"
					},
					{
						"name": "Level",
						"type": "nvarchar"
					},
					{
						"name": "Role",
						"type": "nvarchar"
					},
					{
						"name": "StartDate",
						"type": "date"
					},
					{
						"name": "EndDate",
						"type": "date"
					},
					{
						"name": "iscurrent",
						"type": "int",
						"precision": 10
					},
					{
						"name": "processtime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[DimEmp]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimEmp2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "EmpID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "surrogatekey",
						"type": "nvarchar"
					},
					{
						"name": "Region",
						"type": "nvarchar"
					},
					{
						"name": "Status",
						"type": "nvarchar"
					},
					{
						"name": "EmpFunction",
						"type": "nvarchar"
					},
					{
						"name": "Level",
						"type": "nvarchar"
					},
					{
						"name": "Role",
						"type": "nvarchar"
					},
					{
						"name": "StartDate",
						"type": "date"
					},
					{
						"name": "EndDate",
						"type": "date"
					},
					{
						"name": "iscurrent",
						"type": "int",
						"precision": 10
					},
					{
						"name": "processtime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[DimEmp]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimEmp3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "EmpID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "surrogatekey",
						"type": "nvarchar"
					},
					{
						"name": "Region",
						"type": "nvarchar"
					},
					{
						"name": "Status",
						"type": "nvarchar"
					},
					{
						"name": "EmpFunction",
						"type": "nvarchar"
					},
					{
						"name": "Level",
						"type": "nvarchar"
					},
					{
						"name": "Role",
						"type": "nvarchar"
					},
					{
						"name": "StartDate",
						"type": "date"
					},
					{
						"name": "EndDate",
						"type": "date"
					},
					{
						"name": "iscurrent",
						"type": "int",
						"precision": 10
					},
					{
						"name": "processtime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[DimEmp]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmployeeFiles1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmpID",
						"type": "String"
					},
					{
						"name": "Region",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Function",
						"type": "String"
					},
					{
						"name": "Level",
						"type": "String"
					},
					{
						"name": "Role",
						"type": "String"
					},
					{
						"name": "StartDate",
						"type": "String"
					},
					{
						"name": "EndDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmployeeFiles2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmpID",
						"type": "String"
					},
					{
						"name": "Region",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Function",
						"type": "String"
					},
					{
						"name": "Level",
						"type": "String"
					},
					{
						"name": "Role",
						"type": "String"
					},
					{
						"name": "StartDate",
						"type": "String"
					},
					{
						"name": "EndDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmployeeFiles3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmpID",
						"type": "String"
					},
					{
						"name": "Region",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Function",
						"type": "String"
					},
					{
						"name": "Level",
						"type": "String"
					},
					{
						"name": "Role",
						"type": "String"
					},
					{
						"name": "StartDate",
						"type": "String"
					},
					{
						"name": "EndDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/temp_delta')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "CompanyName",
						"type": "nvarchar"
					},
					{
						"name": "AddressID",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "CustomerDelta"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Source Database",
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime1')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "West Europe",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLiveInMinutes": 60
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AddAddress')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CustomerCopy",
								"type": "DatasetReference"
							},
							"name": "CustomerSource",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "CustomerAddressCopy",
								"type": "DatasetReference"
							},
							"name": "CustomerAddressSource",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "Address",
								"type": "DatasetReference"
							},
							"name": "AddressSource",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "CustomerAddressCopy",
								"type": "DatasetReference"
							},
							"name": "CustomerAddressSource2",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CustomerAndAddress",
								"type": "DatasetReference"
							},
							"name": "CustomerAndAddress"
						}
					],
					"transformations": [
						{
							"name": "LookupKey"
						},
						{
							"name": "Rename"
						},
						{
							"name": "LookupAddress"
						},
						{
							"name": "FilterCustomerID"
						},
						{
							"name": "RemoveDuplicateCustomerID"
						}
					],
					"script": "\n\nsource(output(\n\t\tCustomerID as integer,\n\t\tNameStyle as boolean,\n\t\tTitle as string,\n\t\tFirstName as string,\n\t\tMiddleName as string,\n\t\tLastName as string,\n\t\tSuffix as string,\n\t\tCompanyName as string,\n\t\tSalesPerson as string,\n\t\tEmailAddress as string,\n\t\tPhone as string,\n\t\tPasswordHash as string,\n\t\tPasswordSalt as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> CustomerSource\nsource(output(\n\t\tCustomerID as integer,\n\t\tAddressID as integer,\n\t\tAddressType as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> CustomerAddressSource\nsource(output(\n\t\tAddressID as integer,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tCity as string,\n\t\tStateProvince as string,\n\t\tCountryRegion as string,\n\t\tPostalCode as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> AddressSource\nsource(output(\n\t\tCustomerID as integer,\n\t\tAddressID as integer,\n\t\tAddressType as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> CustomerAddressSource2\nFilterCustomerID, RemoveDuplicateCustomerID lookup(CustomerSource@CustomerID == CustomerAddressSource@CustomerID,\n\tbroadcast: 'none')~> LookupKey\nLookupAddress select(mapColumn(\n\t\tCustomerId = CustomerSource@CustomerID,\n\t\tFirstName,\n\t\tLastName,\n\t\tCompanyName,\n\t\tAddress = AddressLine1,\n\t\tPostalCode\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Rename\nLookupKey, AddressSource lookup(CustomerAddressSource@AddressID == AddressSource@AddressID,\n\tbroadcast: 'none')~> LookupAddress\nCustomerSource filter(CustomerID > 10000) ~> FilterCustomerID\nCustomerAddressSource, CustomerAddressSource2 exists((CustomerAddressSource@CustomerID == CustomerAddressSource2@CustomerID) && (CustomerAddressSource@AddressID != CustomerAddressSource2@AddressID),\n\tnegate:true,\n\tbroadcast: 'none')~> RemoveDuplicateCustomerID\nRename sink(input(\n\t\tCustomerID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tCompanyName as string,\n\t\tAddress as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tkeys:['CustomerId'],\n\ttruncate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tCustomerID = CustomerId,\n\t\tFirstName,\n\t\tLastName,\n\t\tCompanyName,\n\t\tAddress,\n\t\tPostalCode\n\t)) ~> CustomerAndAddress"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CustomerCopy')]",
				"[concat(variables('factoryId'), '/datasets/CustomerAddressCopy')]",
				"[concat(variables('factoryId'), '/datasets/Address')]",
				"[concat(variables('factoryId'), '/datasets/CustomerAndAddress')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimEmployeeLoader21')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeFiles1",
								"type": "DatasetReference"
							},
							"name": "Employees1",
							"description": " Source employees file, changes every day",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "DimEmp1",
								"type": "DatasetReference"
							},
							"name": "DimEmployees",
							"description": "Current rows in DimEmployees DW table",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimEmp1",
								"type": "DatasetReference"
							},
							"name": "sinkNew",
							"description": " "
						},
						{
							"dataset": {
								"referenceName": "DimEmp1",
								"type": "DatasetReference"
							},
							"name": "sinkUpdates",
							"description": " "
						},
						{
							"dataset": {
								"referenceName": "DimEmp1",
								"type": "DatasetReference"
							},
							"name": "sinkInactive",
							"description": " Age out old rows"
						}
					],
					"transformations": [
						{
							"name": "TypeConversions"
						},
						{
							"name": "TypeConversionsAndSetAttrs"
						},
						{
							"name": "LookupIDs"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "checkForChanges"
						},
						{
							"name": "SetAttrsForNew"
						},
						{
							"name": "SetAttrsInactive"
						},
						{
							"name": "SetAttrsUpdate"
						},
						{
							"name": "NormNames"
						},
						{
							"name": "InactiveFields"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "NullFilter"
						},
						{
							"name": "NameNorm2"
						}
					],
					"script": "\n\nsource(output(\n\t\tEmpID as string,\n\t\tRegion as string,\n\t\tStatus as string,\n\t\tFunction as string,\n\t\tLevel as string,\n\t\tRole as string,\n\t\tStartDate as string,\n\t\tEndDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpurgeFiles: true,\n\twildcardPaths:['SampleData/Emps/today/*.csv']) ~> Employees1\nsource(output(\n\t\tEmpID as integer,\n\t\tsurrogatekey as string,\n\t\tRegion as string,\n\t\tStatus as string,\n\t\tEmpFunction as string,\n\t\tLevel as string,\n\t\tRole as string,\n\t\tStartDate as date,\n\t\tEndDate as date,\n\t\tiscurrent as integer,\n\t\tprocesstime as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimEmployees\nDimEmployees derive(EmpID = toInteger(EmpID)) ~> TypeConversions\nNullFilter derive(EmpID = toInteger(EmpID),\n\t\tStartDate = toDate(StartDate,'MM/dd/yyyy'),\n\t\tEndDate = toDate(EndDate,'MM/dd/yyyy'),\n\t\tprocesstime = currentTimestamp()) ~> TypeConversionsAndSetAttrs\nTypeConversionsAndSetAttrs, TypeConversions lookup(TypeConversionsAndSetAttrs@EmpID == TypeConversions@EmpID,\n\tbroadcast: 'none')~> LookupIDs\nNormNames split(isNull(iscurrent),\n\tdisjoint: false) ~> ConditionalSplit1@(NewRow, CheckForUpdates)\nNameNorm2, TypeConversions exists(NameNorm2@EmpID == TypeConversions@EmpID,\n\tnegate:false,\n\tbroadcast: 'none')~> checkForChanges\nConditionalSplit1@NewRow derive(iscurrent = 1,\n\t\tsurrogatekey = toString(crc32(EmpID,EmpFunction))) ~> SetAttrsForNew\ncheckForChanges derive(iscurrent = 0) ~> SetAttrsInactive\ncheckForChanges derive(iscurrent = 1) ~> SetAttrsUpdate\nLookupIDs select(mapColumn(\n\t\tEmpID = TypeConversionsAndSetAttrs@EmpID,\n\t\tRegion = Employees1@Region,\n\t\tStatus = Employees1@Status,\n\t\tLevel = Employees1@Level,\n\t\tRole = Employees1@Role,\n\t\tStartDate = TypeConversionsAndSetAttrs@StartDate,\n\t\tEndDate = TypeConversionsAndSetAttrs@EndDate,\n\t\tEmpFunction = Function,\n\t\tiscurrent,\n\t\tprocesstime = TypeConversionsAndSetAttrs@processtime,\n\t\tsurrogatekey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> NormNames\nSetAttrsInactive select(mapColumn(\n\t\tEmpID,\n\t\tStatus,\n\t\tEndDate,\n\t\tiscurrent,\n\t\tprocesstime\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> InactiveFields\nInactiveFields alterRow(updateIf(true())) ~> AlterRow1\nEmployees1 filter(!isNull(EmpID)) ~> NullFilter\nConditionalSplit1@CheckForUpdates select(mapColumn(\n\t\tEmpID,\n\t\tRegion,\n\t\tStatus,\n\t\tLevel,\n\t\tRole,\n\t\tStartDate,\n\t\tEndDate,\n\t\tEmpFunction,\n\t\tiscurrent,\n\t\tprocesstime,\n\t\tsurrogatekey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> NameNorm2\nSetAttrsForNew sink(input(\n\t\tEmpID as integer,\n\t\tsurrogatekey as string,\n\t\tRegion as string,\n\t\tStatus as string,\n\t\tEmpFunction as string,\n\t\tLevel as string,\n\t\tRole as string,\n\t\tStartDate as date,\n\t\tEndDate as date,\n\t\tiscurrent as integer,\n\t\tprocesstime as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tbatchSize: 50,\n\tpartitionBy('roundRobin', 4)) ~> sinkNew\nSetAttrsUpdate sink(input(\n\t\tEmpID as integer,\n\t\tsurrogatekey as string,\n\t\tRegion as string,\n\t\tStatus as string,\n\t\tEmpFunction as string,\n\t\tLevel as string,\n\t\tRole as string,\n\t\tStartDate as date,\n\t\tEndDate as date,\n\t\tiscurrent as integer,\n\t\tprocesstime as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tbatchSize: 50,\n\tpartitionBy('roundRobin', 4)) ~> sinkUpdates\nAlterRow1 sink(input(\n\t\tEmpID as integer,\n\t\tsurrogatekey as string,\n\t\tRegion as string,\n\t\tStatus as string,\n\t\tEmpFunction as string,\n\t\tLevel as string,\n\t\tRole as string,\n\t\tStartDate as date,\n\t\tEndDate as date,\n\t\tiscurrent as integer,\n\t\tprocesstime as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['EmpID'],\n\tformat: 'table',\n\tbatchSize: 50,\n\tmapColumn(\n\t\tEmpID,\n\t\tEndDate,\n\t\tiscurrent,\n\t\tprocesstime\n\t),\n\tpartitionBy('roundRobin', 4)) ~> sinkInactive"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EmployeeFiles1')]",
				"[concat(variables('factoryId'), '/datasets/DimEmp1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FirstInsertDimCustomer')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Customer",
								"type": "DatasetReference"
							},
							"name": "CustomerSource",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "CustomerAddress2",
								"type": "DatasetReference"
							},
							"name": "CustomerAddressSource",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "Address",
								"type": "DatasetReference"
							},
							"name": "AddressSource",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "CustomerAddress2",
								"type": "DatasetReference"
							},
							"name": "CustomerAddressSource2",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "SurrogateKey"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Join1"
						},
						{
							"name": "FilterNulls"
						},
						{
							"name": "Join2"
						},
						{
							"name": "FilterBigCustomerID"
						},
						{
							"name": "RemoveDuplicateCustomerIDs"
						}
					],
					"script": "\n\nsource(output(\n\t\tCustomerID as integer,\n\t\tNameStyle as boolean,\n\t\tTitle as string,\n\t\tFirstName as string,\n\t\tMiddleName as string,\n\t\tLastName as string,\n\t\tSuffix as string,\n\t\tCompanyName as string,\n\t\tSalesPerson as string,\n\t\tEmailAddress as string,\n\t\tPhone as string,\n\t\tPasswordHash as string,\n\t\tPasswordSalt as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> CustomerSource\nsource(output(\n\t\tCustomerID as integer,\n\t\tAddressID as integer,\n\t\tAddressType as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> CustomerAddressSource\nsource(output(\n\t\tAddressID as integer,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tCity as string,\n\t\tStateProvince as string,\n\t\tCountryRegion as string,\n\t\tPostalCode as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> AddressSource\nsource(output(\n\t\tCustomerID as integer,\n\t\tAddressID as integer,\n\t\tAddressType as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> CustomerAddressSource2\nSelect2 derive(ValidFrom = '2019-08-08',\n\t\tValidTo = '2999-12-31',\n\t\tValid = 1) ~> DerivedColumn1\nDerivedColumn1 keyGenerate(output(SurrogateKey as long),\n\tstartAt: 1L) ~> SurrogateKey\nFilterBigCustomerID select(mapColumn(\n\t\tCustomerID = CustomerSource@CustomerID,\n\t\tFirstName,\n\t\tLastName,\n\t\tCompanyName,\n\t\tAddress = AddressLine1,\n\t\tPostalCode\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select2\nSurrogateKey select(mapColumn(\n\t\tSurrogateKey,\n\t\tCustomerID,\n\t\tFirstName,\n\t\tLastName,\n\t\tCompanyName,\n\t\tAddress,\n\t\tPostalCode,\n\t\tValidFrom,\n\t\tValidTo,\n\t\tValid\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select3\nFilterNulls, RemoveDuplicateCustomerIDs join(CustomerSource@CustomerID == CustomerAddressSource@CustomerID,\n\tjoinType:'left',\n\tbroadcast: 'none')~> Join1\nCustomerSource filter(not(isNull(CustomerID))) ~> FilterNulls\nJoin1, AddressSource join(CustomerAddressSource@AddressID == AddressSource@AddressID,\n\tjoinType:'left',\n\tbroadcast: 'none')~> Join2\nJoin2 filter(CustomerSource@CustomerID > 10000) ~> FilterBigCustomerID\nCustomerAddressSource, CustomerAddressSource2 exists((CustomerAddressSource@CustomerID == CustomerAddressSource2@CustomerID) && (CustomerAddressSource@AddressID != CustomerAddressSource2@AddressID),\n\tnegate:true,\n\tbroadcast: 'none')~> RemoveDuplicateCustomerIDs\nSelect3 sink(input(\n\t\tSurrogateKey as integer,\n\t\tCustomerID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tCompanyName as string,\n\t\tAddress as string,\n\t\tPostalCode as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tValid as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table') ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Customer')]",
				"[concat(variables('factoryId'), '/datasets/CustomerAddress2')]",
				"[concat(variables('factoryId'), '/datasets/Address')]",
				"[concat(variables('factoryId'), '/datasets/DimCustomer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD Data Flow v5')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "DimCustomerSource",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "CustomerAndAddress",
								"type": "DatasetReference"
							},
							"name": "CustomerSource",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "GetMaxValSK",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "sinkChanges"
						},
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "sinkInactive"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNewCustomers"
						},
						{
							"name": "LookupID"
						},
						{
							"name": "CheckForChanges"
						},
						{
							"name": "SetValid0"
						},
						{
							"name": "KeyAsInt"
						},
						{
							"name": "NormNames"
						},
						{
							"name": "NameNorm2"
						},
						{
							"name": "SetInactiveFields"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "SetValidTo"
						},
						{
							"name": "UnionNewAndUpdated"
						},
						{
							"name": "SurrogateKey1"
						},
						{
							"name": "AddSKtoMaxVal"
						},
						{
							"name": "AddMaxValForSK"
						},
						{
							"name": "NullFilter"
						},
						{
							"name": "DimCustomerValid"
						},
						{
							"name": "DeriveColumns"
						},
						{
							"name": "OldOnly"
						}
					],
					"script": "\n\nsource(output(\n\t\tSurrogateKey as integer,\n\t\tCustomerID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tCompanyName as string,\n\t\tAddress as string,\n\t\tPostalCode as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tValid as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimCustomerSource\nsource(output(\n\t\tCustomerID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tCompanyName as string,\n\t\tAddress as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> CustomerSource\nsource(output(\n\t\tmaxval as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select MAX(SurrogateKey) as maxval from dbo.DimCustomer',\n\tformat: 'query') ~> GetMaxValSK\nNormNames split(isNull(Valid),\n\tdisjoint: false) ~> IdentifyNewCustomers@(NewCustomer, OldCustomer)\nKeyAsInt, DimCustomerValid lookup(KeyAsInt@CustomerID == DimCustomerSource@CustomerID,\n\tbroadcast: 'none')~> LookupID\nNameNorm2, DimCustomerValid exists((NameNorm2@CustomerID == DimCustomerSource@CustomerID) && (NameNorm2@Address != DimCustomerSource@Address || \r\nNameNorm2@PostalCode != DimCustomerSource@PostalCode),\n\tnegate:false,\n\tbroadcast: 'none')~> CheckForChanges\nOldOnly derive(Valid = 0) ~> SetValid0\nNullFilter derive(CustomerID = toInteger(CustomerID)) ~> KeyAsInt\nLookupID select(mapColumn(\n\t\tSurrogateKey,\n\t\tCustomerID = KeyAsInt@CustomerID,\n\t\tFirstName = CustomerSource@FirstName,\n\t\tLastName = CustomerSource@LastName,\n\t\tCompanyName = CustomerSource@CompanyName,\n\t\tAddress = CustomerSource@Address,\n\t\tPostalCode = CustomerSource@PostalCode,\n\t\tValidFrom,\n\t\tValidTo,\n\t\tValid\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> NormNames\nIdentifyNewCustomers@OldCustomer select(mapColumn(\n\t\tCustomerID,\n\t\tFirstName,\n\t\tLastName,\n\t\tCompanyName,\n\t\tAddress,\n\t\tPostalCode,\n\t\tValidFrom,\n\t\tValidTo,\n\t\tValid\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> NameNorm2\nSetValidTo select(mapColumn(\n\t\tCustomerID,\n\t\tValidTo,\n\t\tValid\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SetInactiveFields\nSetInactiveFields alterRow(updateIf(true())) ~> AlterRow1\nSetValid0 derive(ValidTo = currentDate()) ~> SetValidTo\nIdentifyNewCustomers@NewCustomer, CheckForChanges union(byName: true)~> UnionNewAndUpdated\nAddMaxValForSK keyGenerate(output(SurrogateKey as long),\n\tstartAt: 1L) ~> SurrogateKey1\nSurrogateKey1 derive(SurrogateKey = toInteger(SurrogateKey) + toInteger(maxval)) ~> AddSKtoMaxVal\nDeriveColumns, GetMaxValSK join(1 == 1,\n\tjoinType:'cross',\n\tbroadcast: 'none')~> AddMaxValForSK\nCustomerSource filter(not(isNull(CustomerID))) ~> NullFilter\nDimCustomerSource filter(Valid == 1) ~> DimCustomerValid\nUnionNewAndUpdated derive(Valid = 1,\n\t\tValidFrom = currentDate(),\n\t\tValidTo = toDate('2999-12-31')) ~> DeriveColumns\nCheckForChanges filter(not(ValidFrom == currentDate())) ~> OldOnly\nAddSKtoMaxVal sink(input(\n\t\tSurrogateKey as integer,\n\t\tCustomerID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tCompanyName as string,\n\t\tAddress as string,\n\t\tPostalCode as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tValid as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table') ~> sinkChanges\nAlterRow1 sink(input(\n\t\tSurrogateKey as integer,\n\t\tCustomerID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tCompanyName as string,\n\t\tAddress as string,\n\t\tPostalCode as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tValid as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['CustomerID'],\n\tformat: 'table') ~> sinkInactive"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DimCustomer')]",
				"[concat(variables('factoryId'), '/datasets/CustomerAndAddress')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD data flow v4')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "DimCustomerSource",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "CustomerAndAddress",
								"type": "DatasetReference"
							},
							"name": "CustomerSource",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "DimCustomerOriginal",
								"type": "DatasetReference"
							},
							"name": "GetMaxValForSK",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "sinkUpdates"
						},
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "sinkInactive"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNewCustomers"
						},
						{
							"name": "LookupID"
						},
						{
							"name": "CheckForChanges"
						},
						{
							"name": "SetValid0"
						},
						{
							"name": "KeyAsInt"
						},
						{
							"name": "NormNames"
						},
						{
							"name": "NameNorm2"
						},
						{
							"name": "SetInactiveFields"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "SetValidTo"
						},
						{
							"name": "UnionNewAndUpdated"
						},
						{
							"name": "SurrogateKey1"
						},
						{
							"name": "AddSKtoMaxVal"
						},
						{
							"name": "AddMaxValForSK"
						},
						{
							"name": "NullFilter"
						},
						{
							"name": "DimCustomerValid"
						},
						{
							"name": "DeriveColumns"
						}
					],
					"script": "\n\nsource(output(\n\t\tSurrogateKey as integer,\n\t\tCustomerID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tCompanyName as string,\n\t\tAddress as string,\n\t\tPostalCode as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tValid as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimCustomerSource\nsource(output(\n\t\tCustomerID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tCompanyName as string,\n\t\tAddress as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> CustomerSource\nsource(output(\n\t\tmaxval as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select MAX(SurrogateKey) as maxval from dbo.DimCustomer',\n\tformat: 'query') ~> GetMaxValForSK\nNormNames split(isNull(Valid),\n\tdisjoint: false) ~> IdentifyNewCustomers@(NewCustomer, OldCustomer)\nKeyAsInt, DimCustomerValid lookup(KeyAsInt@CustomerID == DimCustomerSource@CustomerID,\n\tbroadcast: 'none')~> LookupID\nNameNorm2, DimCustomerValid exists((NameNorm2@CustomerID == DimCustomerSource@CustomerID) && (NameNorm2@Address != DimCustomerSource@Address || \r\nNameNorm2@PostalCode != DimCustomerSource@PostalCode),\n\tnegate:false,\n\tbroadcast: 'none')~> CheckForChanges\nCheckForChanges derive(Valid = 0) ~> SetValid0\nNullFilter derive(CustomerID = toInteger(CustomerID)) ~> KeyAsInt\nLookupID select(mapColumn(\n\t\tSurrogateKey,\n\t\tCustomerID = KeyAsInt@CustomerID,\n\t\tFirstName = CustomerSource@FirstName,\n\t\tLastName = CustomerSource@LastName,\n\t\tCompanyName = CustomerSource@CompanyName,\n\t\tAddress = CustomerSource@Address,\n\t\tPostalCode = CustomerSource@PostalCode,\n\t\tValidFrom,\n\t\tValidTo,\n\t\tValid\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> NormNames\nIdentifyNewCustomers@OldCustomer select(mapColumn(\n\t\tCustomerID,\n\t\tFirstName,\n\t\tLastName,\n\t\tCompanyName,\n\t\tAddress,\n\t\tPostalCode,\n\t\tValidFrom,\n\t\tValidTo,\n\t\tValid\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> NameNorm2\nSetValidTo select(mapColumn(\n\t\tCustomerID,\n\t\tValidTo,\n\t\tValid\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SetInactiveFields\nSetInactiveFields alterRow(updateIf(true())) ~> AlterRow1\nSetValid0 derive(ValidTo = currentDate()) ~> SetValidTo\nIdentifyNewCustomers@NewCustomer, CheckForChanges union(byName: true)~> UnionNewAndUpdated\nAddMaxValForSK keyGenerate(output(SurrogateKey as long),\n\tstartAt: 1L) ~> SurrogateKey1\nSurrogateKey1 derive(SurrogateKey = toInteger(SurrogateKey) + toInteger(maxval)) ~> AddSKtoMaxVal\nDeriveColumns, GetMaxValForSK join(1 == 1,\n\tjoinType:'cross',\n\tbroadcast: 'none')~> AddMaxValForSK\nCustomerSource filter(not(isNull(CustomerID))) ~> NullFilter\nDimCustomerSource filter(Valid == 1) ~> DimCustomerValid\nUnionNewAndUpdated derive(Valid = 1,\n\t\tValidFrom = currentDate(),\n\t\tValidTo = toDate('2999-12-31')) ~> DeriveColumns\nAddSKtoMaxVal sink(input(\n\t\tSurrogateKey as integer,\n\t\tCustomerID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tCompanyName as string,\n\t\tAddress as string,\n\t\tPostalCode as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tValid as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table') ~> sinkUpdates\nAlterRow1 sink(input(\n\t\tSurrogateKey as integer,\n\t\tCustomerID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tCompanyName as string,\n\t\tAddress as string,\n\t\tPostalCode as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tValid as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['CustomerID'],\n\tformat: 'table') ~> sinkInactive"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DimCustomer')]",
				"[concat(variables('factoryId'), '/datasets/CustomerAndAddress')]",
				"[concat(variables('factoryId'), '/datasets/DimCustomerOriginal')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD2 data flow v2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "DimCustomerSource",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "CustomerAndAddress",
								"type": "DatasetReference"
							},
							"name": "CustomerSource",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "DimCustomerOriginal",
								"type": "DatasetReference"
							},
							"name": "GetMaxValForSK",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "sinkChanges"
						},
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "sinkInactive"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNewCustomers"
						},
						{
							"name": "LookupID"
						},
						{
							"name": "CheckForChanges"
						},
						{
							"name": "SetValid0"
						},
						{
							"name": "KeyAsInt"
						},
						{
							"name": "NormNames"
						},
						{
							"name": "NameNorm2"
						},
						{
							"name": "SetInactiveFields"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "SetValidTo"
						},
						{
							"name": "UnionNewAndUpdated"
						},
						{
							"name": "SurrogateKey1"
						},
						{
							"name": "AddSKtoMaxVal"
						},
						{
							"name": "AddMaxValForSK"
						},
						{
							"name": "NullFilter"
						},
						{
							"name": "DimCustomerValid"
						},
						{
							"name": "SetValid1"
						},
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "\n\nsource(output(\n\t\tSurrogateKey as integer,\n\t\tCustomerID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tCompanyName as string,\n\t\tAddress as string,\n\t\tPostalCode as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tValid as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimCustomerSource\nsource(output(\n\t\tCustomerID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tCompanyName as string,\n\t\tAddress as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> CustomerSource\nsource(output(\n\t\tmaxval as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select MAX(SurrogateKey) as maxval from dbo.DimCustomer',\n\tformat: 'query') ~> GetMaxValForSK\nNormNames split(isNull(Valid),\n\tdisjoint: false) ~> IdentifyNewCustomers@(NewCustomer, OldCustomer)\nKeyAsInt, DimCustomerValid lookup(KeyAsInt@CustomerID == DimCustomerSource@CustomerID,\n\tbroadcast: 'none')~> LookupID\nNameNorm2, DimCustomerValid exists((NameNorm2@CustomerID == DimCustomerSource@CustomerID) && (NameNorm2@Address != DimCustomerSource@Address || \r\nNameNorm2@PostalCode != DimCustomerSource@PostalCode),\n\tnegate:false,\n\tbroadcast: 'none')~> CheckForChanges\nCheckForChanges derive(Valid = 1) ~> SetValid0\nNullFilter derive(CustomerID = toInteger(CustomerID)) ~> KeyAsInt\nLookupID select(mapColumn(\n\t\tCustomerID = KeyAsInt@CustomerID,\n\t\tFirstName = CustomerSource@FirstName,\n\t\tLastName = CustomerSource@LastName,\n\t\tCompanyName = CustomerSource@CompanyName,\n\t\tAddress = CustomerSource@Address,\n\t\tPostalCode = CustomerSource@PostalCode,\n\t\tValidFrom,\n\t\tValidTo,\n\t\tValid\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> NormNames\nIdentifyNewCustomers@OldCustomer select(mapColumn(\n\t\tCustomerID,\n\t\tFirstName,\n\t\tLastName,\n\t\tCompanyName,\n\t\tAddress,\n\t\tPostalCode,\n\t\tValidFrom,\n\t\tValidTo,\n\t\tValid\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> NameNorm2\nSetValidTo select(mapColumn(\n\t\tCustomerID,\n\t\tValidTo,\n\t\tValid\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SetInactiveFields\nSetInactiveFields alterRow(updateIf(true())) ~> AlterRow1\nSetValid0 derive(ValidTo = currentDate()) ~> SetValidTo\nIdentifyNewCustomers@NewCustomer, CheckForChanges union(byName: true)~> UnionNewAndUpdated\nAddMaxValForSK keyGenerate(output(SurrogateKey as long),\n\tstartAt: 1L) ~> SurrogateKey1\nSurrogateKey1 derive(SurrogateKey = toInteger(SurrogateKey) + toInteger(maxval)) ~> AddSKtoMaxVal\nDerivedColumn1, GetMaxValForSK join(1 == 1,\n\tjoinType:'cross',\n\tbroadcast: 'none')~> AddMaxValForSK\nCustomerSource filter(not(isNull(CustomerID))) ~> NullFilter\nDimCustomerSource filter(Valid == 1) ~> DimCustomerValid\nUnionNewAndUpdated derive(Valid = 1) ~> SetValid1\nSetValid1 derive(ValidFrom = currentDate()) ~> DerivedColumn1\nAddSKtoMaxVal sink(input(\n\t\tSurrogateKey as integer,\n\t\tCustomerID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tCompanyName as string,\n\t\tAddress as string,\n\t\tPostalCode as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tValid as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table') ~> sinkChanges\nAlterRow1 sink(input(\n\t\tSurrogateKey as integer,\n\t\tCustomerID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tCompanyName as string,\n\t\tAddress as string,\n\t\tPostalCode as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tValid as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['CustomerID'],\n\tformat: 'table') ~> sinkInactive"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DimCustomer')]",
				"[concat(variables('factoryId'), '/datasets/CustomerAndAddress')]",
				"[concat(variables('factoryId'), '/datasets/DimCustomerOriginal')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD2 data flow v3')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "DimCustomerSource",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "CustomerAndAddress",
								"type": "DatasetReference"
							},
							"name": "CustomerSource",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "GetMaxValForSK",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "sinkChanges"
						},
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "sinkInactive"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNewCustomers"
						},
						{
							"name": "LookupID"
						},
						{
							"name": "CheckForChanges"
						},
						{
							"name": "SetValid0"
						},
						{
							"name": "KeyAsInt"
						},
						{
							"name": "NormNames"
						},
						{
							"name": "NameNorm2"
						},
						{
							"name": "SetInactiveFields"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "SetValidTo"
						},
						{
							"name": "UnionNewAndUpdated"
						},
						{
							"name": "SurrogateKey1"
						},
						{
							"name": "AddSKtoMaxVal"
						},
						{
							"name": "AddMaxValForSK"
						},
						{
							"name": "NullFilter"
						},
						{
							"name": "DimCustomerValid"
						},
						{
							"name": "DeriveColumns"
						},
						{
							"name": "MaxValNotNull"
						}
					],
					"script": "\n\nsource(output(\n\t\tSurrogateKey as integer,\n\t\tCustomerID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tCompanyName as string,\n\t\tAddress as string,\n\t\tPostalCode as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tValid as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimCustomerSource\nsource(output(\n\t\tCustomerID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tCompanyName as string,\n\t\tAddress as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> CustomerSource\nsource(output(\n\t\tmaxval as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select MAX(SurrogateKey) as maxval from dbo.DimCustomer',\n\tformat: 'query') ~> GetMaxValForSK\nNormNames split(isNull(Valid),\n\tdisjoint: false) ~> IdentifyNewCustomers@(NewCustomer, OldCustomer)\nKeyAsInt, DimCustomerValid lookup(KeyAsInt@CustomerID == DimCustomerSource@CustomerID,\n\tbroadcast: 'none')~> LookupID\nNameNorm2, DimCustomerValid exists((NameNorm2@CustomerID == DimCustomerSource@CustomerID) && \r\n(NameNorm2@Address != DimCustomerSource@Address || \r\nNameNorm2@PostalCode != DimCustomerSource@PostalCode || \r\nNameNorm2@CompanyName != DimCustomerSource@CompanyName),\n\tnegate:false,\n\tbroadcast: 'none')~> CheckForChanges\nCheckForChanges derive(Valid = 0) ~> SetValid0\nNullFilter derive(CustomerID = toInteger(CustomerID)) ~> KeyAsInt\nLookupID select(mapColumn(\n\t\tSurrogateKey,\n\t\tCustomerID = KeyAsInt@CustomerID,\n\t\tFirstName = CustomerSource@FirstName,\n\t\tLastName = CustomerSource@LastName,\n\t\tCompanyName = CustomerSource@CompanyName,\n\t\tAddress = CustomerSource@Address,\n\t\tPostalCode = CustomerSource@PostalCode,\n\t\tValidFrom,\n\t\tValidTo,\n\t\tValid\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> NormNames\nIdentifyNewCustomers@OldCustomer select(mapColumn(\n\t\tCustomerID,\n\t\tFirstName,\n\t\tLastName,\n\t\tCompanyName,\n\t\tAddress,\n\t\tPostalCode,\n\t\tValidFrom,\n\t\tValidTo,\n\t\tValid\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> NameNorm2\nSetValidTo select(mapColumn(\n\t\tCustomerID,\n\t\tValidTo,\n\t\tValid\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SetInactiveFields\nSetInactiveFields alterRow(updateIf(true())) ~> AlterRow1\nSetValid0 derive(ValidTo = currentDate()) ~> SetValidTo\nIdentifyNewCustomers@NewCustomer, CheckForChanges union(byName: true)~> UnionNewAndUpdated\nAddMaxValForSK keyGenerate(output(SurrogateKey as long),\n\tstartAt: 1L) ~> SurrogateKey1\nSurrogateKey1 derive(SurrogateKey = toInteger(SurrogateKey) + case(isNull(maxval), 0, toInteger(maxval))) ~> AddSKtoMaxVal\nDeriveColumns, MaxValNotNull join(1 == 1,\n\tjoinType:'cross',\n\tbroadcast: 'none')~> AddMaxValForSK\nCustomerSource filter(not(isNull(CustomerID))) ~> NullFilter\nDimCustomerSource filter(Valid == 1) ~> DimCustomerValid\nUnionNewAndUpdated derive(Valid = 1,\n\t\tValidFrom = currentDate(),\n\t\tValidTo = toDate('2999-12-31')) ~> DeriveColumns\nGetMaxValForSK derive(maxval = iifNull(maxval, 0)) ~> MaxValNotNull\nAddSKtoMaxVal sink(input(\n\t\tSurrogateKey as integer,\n\t\tCustomerID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tCompanyName as string,\n\t\tAddress as string,\n\t\tPostalCode as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tValid as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table') ~> sinkChanges\nAlterRow1 sink(input(\n\t\tSurrogateKey as integer,\n\t\tCustomerID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tCompanyName as string,\n\t\tAddress as string,\n\t\tPostalCode as string,\n\t\tValidFrom as date,\n\t\tValidTo as date,\n\t\tValid as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['CustomerID'],\n\tformat: 'table') ~> sinkInactive"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DimCustomer')]",
				"[concat(variables('factoryId'), '/datasets/CustomerAndAddress')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SetUnknownMember')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CustomerAndAddress",
								"type": "DatasetReference"
							},
							"name": "SetUnknownMembers",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CustomerAndAddress",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "SetUnknownValues"
						},
						{
							"name": "AlterAddress"
						},
						{
							"name": "Filter1"
						}
					],
					"script": "\n\nsource(output(\n\t\tCustomerID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tCompanyName as string,\n\t\tAddress as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SetUnknownMembers\nFilter1 derive(Address = 'Unknown') ~> SetUnknownValues\nSetUnknownValues alterRow(updateIf(true())) ~> AlterAddress\nSetUnknownMembers filter(isNull(Address)) ~> Filter1\nAlterAddress sink(input(\n\t\tCustomerID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tCompanyName as string,\n\t\tAddress as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table') ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CustomerAndAddress')]"
			]
		}
	]
}